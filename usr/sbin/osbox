#!/bin/bash

#set -e

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
  if [[ -x "$(command -v sudo)" ]]; then
    exec sudo bash "$0" "$@"
    exit $?
  else
    echo -e "  ${CROSS} sudo is needed to run osbox commands.  Please run this script as root or install sudo."
    exit 1
  fi
fi


#####################################
##
##
##             STAGES
##
##
#####################################

source /usr/share/osbox/variables

if [ ! -f $OSBOX_STATE_FILE ]; then
  mkdir $OSBOX_ETC
  echo "0">$OSBOX_STATE_FILE
  INSTALLSTATE="0"
else
  INSTALLSTATE=$(<$OSBOX_STATE_FILE)
fi

######################################
##         installation             ##
######################################

if [ "$1" == "reset" ]; then
  echo "0">$OSBOX_STATE_FILE
  exit 0;
fi
if [ "$1" == "reinstall" ]; then
  echo "0">$OSBOX_STATE_FILE
  curl -sSL https://raw.githubusercontent.com/jerryhopper/osbox/master/advanced/installation.sh | bash
  exit 0;
fi
if [ "$1" == "install" ]; then
  bash /usr/lib/osbox/stage/install_command.sh
  exit 0;
fi
if [ "$1" == "bootcheck" ]; then
  #if [ "$INSTALLSTATE" != "0" ]; then
      bash /usr/lib/osbox/stage/boot_command.sh
      exit 0;
  #fi
  echo "Wrong state."
  exit 0;
fi
if [ "$1" == "update" ]; then
  bash /usr/lib/osbox/stage/update_osbox.sh
  exit 0;
fi

#######################################
#   osbox network <command>
#######################################
if [ "$1" == "network" ]; then
  bash /usr/lib/osbox/stage/network.sh $2 $3 $4 $5 $6
  exit 0;
fi

######################################
##             reboot               ##
######################################
if [ "$1" == "reboot" ]; then
    nohup reboot & >/dev/null
    exit 0;
fi
######################################





echo "Usage: osbox (install|update|reset)"
exit













generate_post_data()
{
  ### GET DEVICE/SETUP SPECIFIC VALUES ###
  MID=$(cat /etc/machine-id)
  MAC=$(ip addr show eth0|grep "ether"|cut -d' ' -f 6)
  MEMALL=$(cat /proc/meminfo|grep -m 1 "MemTotal"|cut -d' ' -f 2-);
  MEA=$(echo $MEMALL|cut -d' ' -f 1)
  MEU=$(echo $MEMALL|cut -d' ' -f 2)
  SDS=$(udevadm info --query=all --name=/dev/mmcblk0p1|grep ID_SERIAL|cut -d'=' -f 2)
  FPU=$(udevadm info --query=all --name=/dev/mmcblk0p1|grep ID_PART_TABLE_UUID|cut -d'=' -f 2)
  FSU=$(udevadm info --query=all --name=/dev/mmcblk0p1|grep -m 1 ID_FS_UUID|cut -d'=' -f 2)
  CPH=$(cat /proc/cpuinfo |grep -m 1 "Hardware"|cut -d' ' -f 2)
  CPI=$(cat /proc/cpuinfo |grep -m 1 "CPU implementer"|cut -d' ' -f 3)
  CPP=$(cat /proc/cpuinfo |grep -m 1 "Processor"|cut -d' ' -f 2-6)
  CPA=$(cat /proc/cpuinfo |grep -m 1 "CPU architecture"|cut -d' ' -f 3)
  CPR=$(cat /proc/cpuinfo |grep -m 1 "CPU revision"|cut -d' ' -f 3)
  DTE=$(date)
  cat <<EOF
{"MID":"$MID","MAC":"$MAC","MEA":"$MEA","MEU":"$MEU","SDS":"$SDS","FPU":"$FPU","FSU":"$FSU","CPH":"$CPH","CPI":"$CPI","CPP":"$CPP","CPA":"$CPA","DTE":"$DTE","CPR":"$CPR"}
EOF
}










# A function that combines the functions previously made
getGitFiles() {
    # Setup named variables for the git repos
    # We need the directory
    local directory="${1}"
    # as well as the repo URL
    local remoteRepo="${2}"
    # A local variable containing the message to be displayed
    local str="Check for existing repository in ${1}"
    # Show the message
    printf "  %b %s..." "${INFO}" "${str}"
    # Check if the directory is a repository
    if is_repo "${directory}"; then
        # Show that we're checking it
        printf "%b  %b %s\\n" "${OVER}" "${TICK}" "${str}"
        # Update the repo, returning an error message on failure
        update_repo "${directory}" || { printf "\\n  %b: Could not update local repository. Contact support.%b\\n" "${COL_LIGHT_RED}" "${COL_NC}"; exit 1; }
    # If it's not a .git repo,
    else
        # Show an error
        printf "%b  %b %s\\n" "${OVER}" "${CROSS}" "${str}"
        # Attempt to make the repository, showing an error on failure
        make_repo "${directory}" "${remoteRepo}" || { printf "\\n  %bError: Could not update local repository. Contact support.%b\\n" "${COL_LIGHT_RED}" "${COL_NC}"; exit 1; }
    fi
    # echo a blank line
    echo ""
    # and return success?
    return 0
}


includeSources(){
    source "/usr/share/blackbox/func/devicelog.sh"
    source "/usr/share/blackbox/func/telegram.sh"
    source "/usr/share/blackbox/func/valid_ip.sh"
    source "/usr/share/blackbox/func/find_ip4_information.sh"
}



sendhash()
{
  # post the hardware data to ur api backend.
  # we send the hardware-hash as authorization header.
  #POSTDATA=$(<$TMP_POSTDATA)
  #HARDWAREHASH=$(<$TMP_POSTDATAHASH)

  status_code=$(curl --write-out %{http_code} --silent --output /dev/null -i \
  -H "User-Agent: surfwijzerblackbox" \
  -H "Cache-Control: private, max-age=0, no-cache" \
  -H "Accept: application/json" \
  -H "X-Script: 2_registerhardware.sh" \
  -H "Content-Type:application/json" \
  -H "Authorization: $BID" \
  -X POST --data "$(<$BB_JSON)" "https://api.surfwijzer.nl/blackbox/api/installation/$BID/$IPV4_ADDRESS")

  # check if the post succeeds
  if [[ "$status_code" -eq 200 ]] ; then
    # unsuccessful attempt.
    telegram "sendhash Ok (already registered!) : Status = $status_code"
    #devicelog "sendhash Ok (already registered!) : Status = $status_code ($IPV4_ADDRESS)"
    echo "sendhash Ok (already registered!)  : Status = $status_code ($IPV4_ADDRESS)" >>/boot/log.txt
    #echo "sendhash Error : Status = $status_code">>/boot/log.txt
    #echo "Site status changed to $status_code"
    #echo "ERRORRRR do not activate."

  elif [[ "$status_code" -eq 201  ]] ;then
    telegram "sendhash ok : device registered ( $IPV4_ADDRESS) $BID"
    #devicelog "sendhash ok : device registered ($IPV4_ADDRESS) $BID"
    echo "sendhash ok : device registered ($IPV4_ADDRESS) $BID" >>/boot/log.txt
    #createpostboot
    #echo "5" > $BB_STATE
    # write the hash for later reference.
    #mkdir -p /var/www
    echo  $BID>$BB_HASH

  else

    telegram "sendhash ERROR  : Status = $status_code ($IPV4_ADDRESS)"
    #devicelog "sendhash ERROR  : Status = $status_code ($IPV4_ADDRESS)"
    echo "sendhash ERROR  : Status = $status_code ($IPV4_ADDRESS)"  >>/boot/log.txt
  fi
}




SCRIPT_FILENAME="blackbox"
INSTALLSTATE=none



#echo "1=$1 2=$2 3=$3"

if [ "$1" == "" ]; then
  echo "blackbox"
  echo "Usage: blackbox [option] "
  echo "Options : install, configure, check "
  exit 0
fi


# load blackbox.conf
if [ -f "/etc/blackbox/blackbox.conf" ]; then
  source "/etc/blackbox/blackbox.conf"
  echo "bbstate=$BB_STATE">>/boot/log.txt
  echo "bbjson=$BB_JSON">>/boot/log.txt
else
  echo "/etc/blackbox/blackbox.conf doesnt exist.">>/boot/log.txt
  exit 1
fi



if [ -f "$BB_HASH" ]; then
    BID=$(<$BB_HASH)
else
    if [ -f "/etc/blackbox/blackbox.conf" ]; then
      echo $(generate_post_data)>/etc/blackbox/hardware.json
      echo $(echo -n "$POSTDATA"|openssl dgst -sha256|cut -d' ' -f 2)/etc/blackbox/blackbox.id
      echo "1" > $BB_STATE
    else
      echo "0" > $BB_STATE
      echo "/etc/blackbox/blackbox.conf doesnt exist.">>/boot/log.txt
    fi

fi


# load installlstate in variable
if [ -f "$BB_STATE" ]; then
    INSTALLSTATE=$(<$BB_STATE)
fi


install(){

    if [ "$INSTALLSTATE" == "9" ]; then
        echo "Check completed."
        exit 0;
    fi

    # check installstate, if installstate == 0, copy files.

    if [ "$INSTALLSTATE" == "1" ]; then
        #telegram "INSTALLSTATE=$INSTALLSTATE Installing files in /usr/share/blackbox "
        ln -s /boot/installsrc/usr/share/blackbox /usr/share
        #cp -r -v -f /boot/installsrc/usr/share/blackbox /usr/share
        echo "2" > $BB_STATE
        INSTALLSTATE=2
    fi

    if [ -d /usr/share/blackbox ]; then
        includeSources
    fi




    if [ "$INSTALLSTATE" == "2" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE  "
        #cp -r -v -f /boot/installsrc/usr/share/blackbox /usr/share
        echo "3" > $BB_STATE
        INSTALLSTATE=3
    fi


    if [ "$INSTALLSTATE" == "3" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE "
        #if ! is_command "git"; then
        #    /boot/dietpi/dietpi-software install 81 17 --unattended
        #else
        #echo "4">$BB_STATE
        echo "4" > $BB_STATE
        INSTALLSTATE=4
        #fi
    fi



    if [ "$INSTALLSTATE" == "4" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE apt-get install prerequisites"
        # git lighttpd
        apt-get -y install php-common php-sqlite3 php-xml php-intl php-zip php-mbstring php-gd php-apcu php-cgi composer dialog dhcpcd5 dnsutils lsof nmap netcat idn2 dns-root-data composer
        echo "5" > $BB_STATE
        INSTALLSTATE=5
    fi


    if [ "$INSTALLSTATE" == "5" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE Cloning blackbox.git"
        echo "mkdir "
        if [ ! -d "/var/www/html/blackbox" ]; then
            mkdir -p /var/www/html/blackbox
        fi
        echo "makerepo"
        make_repo /var/www/html/blackbox https://github.com/jerryhopper/blackboxweb.git
        echo "setstate"
        echo "6" > $BB_STATE
        echo "composer install"
        composer install -d /var/www/html/blackbox
        INSTALLSTATE=6
    fi


    if [ "$INSTALLSTATE" == "6" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE Installing Pihole configs and blocklists"
        find_IPv4_information
        piholesetupvarsconf
        piholeftlconf
        piholeadlists
        echo "7" > $BB_STATE
        INSTALLSTATE=7
    fi


    if [ "$INSTALLSTATE" == "7" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE Installing Pi-Hole from official repository"
        echo "install started : pihole">>/boot/log.txt
        curl -L https://install.pi-hole.net | bash /dev/stdin --unattended
        #curl -L https://raw.githubusercontent.com/jerryhopper/pi-hole/master/automated%20install/basic-install.sh  | bash /dev/stdin --unattended
        #curl -L https://github.com/jerryhopper/pi-hole/blob/release/v5.0/automated%20install/basic-install.sh  | bash /dev/stdin --unattended

        #telegram "install finished : pihole"
        echo "install finished : pihole">>/boot/log.txt
        echo "8" > $BB_STATE
        INSTALLSTATE=8
    fi


    if [ "$INSTALLSTATE" == "8" ]; then
        telegram "INSTALLSTATE=$INSTALLSTATE Finalizing installation."
        usermod -a -G pihole www-data

        if [ ! -f "/etc/pihole/ftlbranch" ] ; then
            #if [ "$(</etc/pihole/ftlbranch)" != "release/v5.0" ]; then

                # Set repo to V5 beta
                echo "release/v5.0" | sudo tee /etc/pihole/ftlbranch

                telegram "INSTALLSTATE=$INSTALLSTATE Checking out release/v5 CORE"
                #devicelog "[v$VERSION] Checkout release/v5.0 CORE "
                echo "yes"|pihole checkout core release/v5.0

                telegram "INSTALLSTATE=$INSTALLSTATE Checking out release/v5 WEB"
                #devicelog "[v$VERSION] Checkout release/v5.0 WEB "
                echo "yes"|pihole checkout web release/v5.0
            #fi

        fi

        #echo 'server.document-root        = "/var/www/html"'>/etc/lighttpd/external.conf
        #echo 'server.error-handler-404    = "/blackbox/index.php"'>>/etc/lighttpd/external.conf




        #devicelog "[v$VERSION] Usermod "

        usermod -a -G pihole www-data
        #devicelog "[v$VERSION] edit lighttpd "
        sed -i -e 's/pihole\/index.php/blackbox\/index.php/g' /etc/lighttpd/lighttpd.conf
        sed -i -e 's/"\/var\/www"/"\/var\/www\/html"/g' /etc/lighttpd/lighttpd.conf

        echo "www-data ALL=NOPASSWD: /usr/sbin/blackbox">/etc/sudoers.d/blackbox

        telegram "INSTALLSTATE=$INSTALLSTATE create postboot"

        createpostboot

        service lighttpd restart
        echo "9" > $BB_STATE
        INSTALLSTATE=9
        telegram "INSTALLSTATE=$INSTALLSTATE"
        #reboot
    fi

}

######################################
##         installation             ##
######################################
if [ "$1" == "install" ]; then
    if [ "$INSTALLSTATE" != "9" ]; then
        install
        exit 0;
    fi
fi
######################################




######################################
##           Boot Check             ##
######################################
if [ "$1" == "boot" ]; then
    includeSources
    bash /var/lib/dietpi/postboot.d/postboot0.sh
    sleep 1
    bash /var/lib/dietpi/postboot.d/postboot1.sh
fi
######################################


######################################
##           Owner                ##
######################################
if [ "$1" == "owner" ]; then
    includeSources
    if [ "$2" == "set" ]; then
        #bash /usr/share/blackbox/networkinfo.sh
        echo "$3">/etc/blackbox/blackbox.owner
    fi
fi
######################################


######################################
##           Network             ##
######################################
if [ "$1" == "network" ]; then
    includeSources

    if [ "$2" == "info" ]; then
        bash /usr/share/blackbox/networkinfo.sh
    fi
    if [ "$2" == "scan" ]; then
        bash /usr/share/blackbox/networkscan.sh
    fi

    if [ "$2" == "reset" ]; then
        #echo "network reset"
        bash /usr/share/blackbox/networkreset.sh
    fi
    if [ "$2" == "set" ]; then
        #echo "network set"
        bash /usr/share/blackbox/networksetstatic.sh $3 $4 $5
        sleep 1
    fi

    if [ "$2" == "current" ]; then
        #echo "network current"
        bash /usr/share/blackbox/networkcurrent.sh
    fi
fi
######################################







######################################
##         registerdevice           ##
######################################
if [ "$1" == "registerdevice" ]; then
    includeSources
    if [ "$INSTALLSTATE" == "9" ]; then
        sendhash
        echo "10" > $BB_STATE
        INSTALLSTATE=10
        telegram "INSTALLSTATE=$INSTALLSTATE"
        reboot
    fi
fi
######################################


######################################
##           Update!                ##
######################################
if [ "$1" == "update" ]; then
    includeSources
    #make_repo /var/www/html/blackbox
    getGitFiles /var/www/html/blackbox https://github.com/jerryhopper/blackboxweb.git
    update_repo "/var/www/html/blackbox"


fi
######################################




######################################
##            Check             ##
######################################
if [ "$1" == "check" ]; then
    includeSources
    echo "INSTALLSTATE=$INSTALLSTATE"

fi
######################################







######################################
##           Configure              ##
######################################
if [ "$1" == "configure" ]; then
    includeSources
    echo "INSTALLSTATE=$INSTALLSTATE"
fi
######################################

######################################
##          Reset bbstate           ##
######################################
if [ "$1" == "reset" ]; then
    echo "1">/etc/blackbox/blackbox.state
    #rm /usr/sbin/blackbox
    #rm /usr/share/blackbox
fi
######################################










